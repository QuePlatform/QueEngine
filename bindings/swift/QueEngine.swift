// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(QueEngineFFI)
import QueEngineFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_que_engine_ffi_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_que_engine_ffi_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate class UniffiHandleMap<T> {
    private var map: [UInt64: T] = [:]
    private let lock = NSLock()
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}


public struct FfiC2paConfig {
    public var source: FfiAssetRef
    public var output: FfiOutputTarget
    public var manifestDefinition: String?
    public var parent: FfiAssetRef?
    public var parentBaseDir: String?
    public var signerUri: String
    public var signingAlg: FfiSigAlg
    public var timestamper: FfiTimestamper?
    public var remoteManifestUrl: String?
    public var embed: Bool
    public var trustPolicy: FfiTrustPolicyConfig?
    public var skipPostSignValidation: Bool
    public var allowInsecureRemoteHttp: Bool?
    public var limits: FfiLimitsConfig

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(source: FfiAssetRef, output: FfiOutputTarget, manifestDefinition: String?, parent: FfiAssetRef?, parentBaseDir: String?, signerUri: String, signingAlg: FfiSigAlg, timestamper: FfiTimestamper?, remoteManifestUrl: String?, embed: Bool, trustPolicy: FfiTrustPolicyConfig?, skipPostSignValidation: Bool, allowInsecureRemoteHttp: Bool?, limits: FfiLimitsConfig) {
        self.source = source
        self.output = output
        self.manifestDefinition = manifestDefinition
        self.parent = parent
        self.parentBaseDir = parentBaseDir
        self.signerUri = signerUri
        self.signingAlg = signingAlg
        self.timestamper = timestamper
        self.remoteManifestUrl = remoteManifestUrl
        self.embed = embed
        self.trustPolicy = trustPolicy
        self.skipPostSignValidation = skipPostSignValidation
        self.allowInsecureRemoteHttp = allowInsecureRemoteHttp
        self.limits = limits
    }
}



extension FfiC2paConfig: Equatable, Hashable {
    public static func ==(lhs: FfiC2paConfig, rhs: FfiC2paConfig) -> Bool {
        if lhs.source != rhs.source {
            return false
        }
        if lhs.output != rhs.output {
            return false
        }
        if lhs.manifestDefinition != rhs.manifestDefinition {
            return false
        }
        if lhs.parent != rhs.parent {
            return false
        }
        if lhs.parentBaseDir != rhs.parentBaseDir {
            return false
        }
        if lhs.signerUri != rhs.signerUri {
            return false
        }
        if lhs.signingAlg != rhs.signingAlg {
            return false
        }
        if lhs.timestamper != rhs.timestamper {
            return false
        }
        if lhs.remoteManifestUrl != rhs.remoteManifestUrl {
            return false
        }
        if lhs.embed != rhs.embed {
            return false
        }
        if lhs.trustPolicy != rhs.trustPolicy {
            return false
        }
        if lhs.skipPostSignValidation != rhs.skipPostSignValidation {
            return false
        }
        if lhs.allowInsecureRemoteHttp != rhs.allowInsecureRemoteHttp {
            return false
        }
        if lhs.limits != rhs.limits {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(source)
        hasher.combine(output)
        hasher.combine(manifestDefinition)
        hasher.combine(parent)
        hasher.combine(parentBaseDir)
        hasher.combine(signerUri)
        hasher.combine(signingAlg)
        hasher.combine(timestamper)
        hasher.combine(remoteManifestUrl)
        hasher.combine(embed)
        hasher.combine(trustPolicy)
        hasher.combine(skipPostSignValidation)
        hasher.combine(allowInsecureRemoteHttp)
        hasher.combine(limits)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFfiC2paConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiC2paConfig {
        return
            try FfiC2paConfig(
                source: FfiConverterTypeFfiAssetRef.read(from: &buf), 
                output: FfiConverterTypeFfiOutputTarget.read(from: &buf), 
                manifestDefinition: FfiConverterOptionString.read(from: &buf), 
                parent: FfiConverterOptionTypeFfiAssetRef.read(from: &buf), 
                parentBaseDir: FfiConverterOptionString.read(from: &buf), 
                signerUri: FfiConverterString.read(from: &buf), 
                signingAlg: FfiConverterTypeFfiSigAlg.read(from: &buf), 
                timestamper: FfiConverterOptionTypeFfiTimestamper.read(from: &buf), 
                remoteManifestUrl: FfiConverterOptionString.read(from: &buf), 
                embed: FfiConverterBool.read(from: &buf), 
                trustPolicy: FfiConverterOptionTypeFfiTrustPolicyConfig.read(from: &buf), 
                skipPostSignValidation: FfiConverterBool.read(from: &buf), 
                allowInsecureRemoteHttp: FfiConverterOptionBool.read(from: &buf), 
                limits: FfiConverterTypeFfiLimitsConfig.read(from: &buf)
        )
    }

    public static func write(_ value: FfiC2paConfig, into buf: inout [UInt8]) {
        FfiConverterTypeFfiAssetRef.write(value.source, into: &buf)
        FfiConverterTypeFfiOutputTarget.write(value.output, into: &buf)
        FfiConverterOptionString.write(value.manifestDefinition, into: &buf)
        FfiConverterOptionTypeFfiAssetRef.write(value.parent, into: &buf)
        FfiConverterOptionString.write(value.parentBaseDir, into: &buf)
        FfiConverterString.write(value.signerUri, into: &buf)
        FfiConverterTypeFfiSigAlg.write(value.signingAlg, into: &buf)
        FfiConverterOptionTypeFfiTimestamper.write(value.timestamper, into: &buf)
        FfiConverterOptionString.write(value.remoteManifestUrl, into: &buf)
        FfiConverterBool.write(value.embed, into: &buf)
        FfiConverterOptionTypeFfiTrustPolicyConfig.write(value.trustPolicy, into: &buf)
        FfiConverterBool.write(value.skipPostSignValidation, into: &buf)
        FfiConverterOptionBool.write(value.allowInsecureRemoteHttp, into: &buf)
        FfiConverterTypeFfiLimitsConfig.write(value.limits, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFfiC2paConfig_lift(_ buf: RustBuffer) throws -> FfiC2paConfig {
    return try FfiConverterTypeFfiC2paConfig.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFfiC2paConfig_lower(_ value: FfiC2paConfig) -> RustBuffer {
    return FfiConverterTypeFfiC2paConfig.lower(value)
}


public struct FfiC2paVerificationConfig {
    public var source: FfiAssetRef
    public var mode: FfiVerifyMode
    public var policy: FfiTrustPolicyConfig?
    public var allowRemoteManifests: Bool
    public var includeCertificates: Bool?
    public var limits: FfiLimitsConfig

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(source: FfiAssetRef, mode: FfiVerifyMode, policy: FfiTrustPolicyConfig?, allowRemoteManifests: Bool, includeCertificates: Bool?, limits: FfiLimitsConfig) {
        self.source = source
        self.mode = mode
        self.policy = policy
        self.allowRemoteManifests = allowRemoteManifests
        self.includeCertificates = includeCertificates
        self.limits = limits
    }
}



extension FfiC2paVerificationConfig: Equatable, Hashable {
    public static func ==(lhs: FfiC2paVerificationConfig, rhs: FfiC2paVerificationConfig) -> Bool {
        if lhs.source != rhs.source {
            return false
        }
        if lhs.mode != rhs.mode {
            return false
        }
        if lhs.policy != rhs.policy {
            return false
        }
        if lhs.allowRemoteManifests != rhs.allowRemoteManifests {
            return false
        }
        if lhs.includeCertificates != rhs.includeCertificates {
            return false
        }
        if lhs.limits != rhs.limits {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(source)
        hasher.combine(mode)
        hasher.combine(policy)
        hasher.combine(allowRemoteManifests)
        hasher.combine(includeCertificates)
        hasher.combine(limits)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFfiC2paVerificationConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiC2paVerificationConfig {
        return
            try FfiC2paVerificationConfig(
                source: FfiConverterTypeFfiAssetRef.read(from: &buf), 
                mode: FfiConverterTypeFfiVerifyMode.read(from: &buf), 
                policy: FfiConverterOptionTypeFfiTrustPolicyConfig.read(from: &buf), 
                allowRemoteManifests: FfiConverterBool.read(from: &buf), 
                includeCertificates: FfiConverterOptionBool.read(from: &buf), 
                limits: FfiConverterTypeFfiLimitsConfig.read(from: &buf)
        )
    }

    public static func write(_ value: FfiC2paVerificationConfig, into buf: inout [UInt8]) {
        FfiConverterTypeFfiAssetRef.write(value.source, into: &buf)
        FfiConverterTypeFfiVerifyMode.write(value.mode, into: &buf)
        FfiConverterOptionTypeFfiTrustPolicyConfig.write(value.policy, into: &buf)
        FfiConverterBool.write(value.allowRemoteManifests, into: &buf)
        FfiConverterOptionBool.write(value.includeCertificates, into: &buf)
        FfiConverterTypeFfiLimitsConfig.write(value.limits, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFfiC2paVerificationConfig_lift(_ buf: RustBuffer) throws -> FfiC2paVerificationConfig {
    return try FfiConverterTypeFfiC2paVerificationConfig.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFfiC2paVerificationConfig_lower(_ value: FfiC2paVerificationConfig) -> RustBuffer {
    return FfiConverterTypeFfiC2paVerificationConfig.lower(value)
}


public struct FfiCertInfo {
    public var alg: String?
    public var issuer: String?
    public var certSerialNumber: String?
    public var time: String?
    public var revocationStatus: Bool?
    public var chainPem: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(alg: String?, issuer: String?, certSerialNumber: String?, time: String?, revocationStatus: Bool?, chainPem: String?) {
        self.alg = alg
        self.issuer = issuer
        self.certSerialNumber = certSerialNumber
        self.time = time
        self.revocationStatus = revocationStatus
        self.chainPem = chainPem
    }
}



extension FfiCertInfo: Equatable, Hashable {
    public static func ==(lhs: FfiCertInfo, rhs: FfiCertInfo) -> Bool {
        if lhs.alg != rhs.alg {
            return false
        }
        if lhs.issuer != rhs.issuer {
            return false
        }
        if lhs.certSerialNumber != rhs.certSerialNumber {
            return false
        }
        if lhs.time != rhs.time {
            return false
        }
        if lhs.revocationStatus != rhs.revocationStatus {
            return false
        }
        if lhs.chainPem != rhs.chainPem {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(alg)
        hasher.combine(issuer)
        hasher.combine(certSerialNumber)
        hasher.combine(time)
        hasher.combine(revocationStatus)
        hasher.combine(chainPem)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFfiCertInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiCertInfo {
        return
            try FfiCertInfo(
                alg: FfiConverterOptionString.read(from: &buf), 
                issuer: FfiConverterOptionString.read(from: &buf), 
                certSerialNumber: FfiConverterOptionString.read(from: &buf), 
                time: FfiConverterOptionString.read(from: &buf), 
                revocationStatus: FfiConverterOptionBool.read(from: &buf), 
                chainPem: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: FfiCertInfo, into buf: inout [UInt8]) {
        FfiConverterOptionString.write(value.alg, into: &buf)
        FfiConverterOptionString.write(value.issuer, into: &buf)
        FfiConverterOptionString.write(value.certSerialNumber, into: &buf)
        FfiConverterOptionString.write(value.time, into: &buf)
        FfiConverterOptionBool.write(value.revocationStatus, into: &buf)
        FfiConverterOptionString.write(value.chainPem, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFfiCertInfo_lift(_ buf: RustBuffer) throws -> FfiCertInfo {
    return try FfiConverterTypeFfiCertInfo.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFfiCertInfo_lower(_ value: FfiCertInfo) -> RustBuffer {
    return FfiConverterTypeFfiCertInfo.lower(value)
}


public struct FfiFragmentedBmffConfig {
    public var initGlob: String
    public var fragmentsGlob: String
    public var outputDir: String
    public var manifestDefinition: String?
    public var signerUri: String
    public var signingAlg: FfiSigAlg
    public var timestamper: FfiTimestamper?
    public var remoteManifestUrl: String?
    public var embed: Bool
    public var skipPostSignValidation: Bool
    public var allowInsecureRemoteHttp: Bool?
    public var limits: FfiLimitsConfig

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(initGlob: String, fragmentsGlob: String, outputDir: String, manifestDefinition: String?, signerUri: String, signingAlg: FfiSigAlg, timestamper: FfiTimestamper?, remoteManifestUrl: String?, embed: Bool, skipPostSignValidation: Bool, allowInsecureRemoteHttp: Bool?, limits: FfiLimitsConfig) {
        self.initGlob = initGlob
        self.fragmentsGlob = fragmentsGlob
        self.outputDir = outputDir
        self.manifestDefinition = manifestDefinition
        self.signerUri = signerUri
        self.signingAlg = signingAlg
        self.timestamper = timestamper
        self.remoteManifestUrl = remoteManifestUrl
        self.embed = embed
        self.skipPostSignValidation = skipPostSignValidation
        self.allowInsecureRemoteHttp = allowInsecureRemoteHttp
        self.limits = limits
    }
}



extension FfiFragmentedBmffConfig: Equatable, Hashable {
    public static func ==(lhs: FfiFragmentedBmffConfig, rhs: FfiFragmentedBmffConfig) -> Bool {
        if lhs.initGlob != rhs.initGlob {
            return false
        }
        if lhs.fragmentsGlob != rhs.fragmentsGlob {
            return false
        }
        if lhs.outputDir != rhs.outputDir {
            return false
        }
        if lhs.manifestDefinition != rhs.manifestDefinition {
            return false
        }
        if lhs.signerUri != rhs.signerUri {
            return false
        }
        if lhs.signingAlg != rhs.signingAlg {
            return false
        }
        if lhs.timestamper != rhs.timestamper {
            return false
        }
        if lhs.remoteManifestUrl != rhs.remoteManifestUrl {
            return false
        }
        if lhs.embed != rhs.embed {
            return false
        }
        if lhs.skipPostSignValidation != rhs.skipPostSignValidation {
            return false
        }
        if lhs.allowInsecureRemoteHttp != rhs.allowInsecureRemoteHttp {
            return false
        }
        if lhs.limits != rhs.limits {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(initGlob)
        hasher.combine(fragmentsGlob)
        hasher.combine(outputDir)
        hasher.combine(manifestDefinition)
        hasher.combine(signerUri)
        hasher.combine(signingAlg)
        hasher.combine(timestamper)
        hasher.combine(remoteManifestUrl)
        hasher.combine(embed)
        hasher.combine(skipPostSignValidation)
        hasher.combine(allowInsecureRemoteHttp)
        hasher.combine(limits)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFfiFragmentedBmffConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiFragmentedBmffConfig {
        return
            try FfiFragmentedBmffConfig(
                initGlob: FfiConverterString.read(from: &buf), 
                fragmentsGlob: FfiConverterString.read(from: &buf), 
                outputDir: FfiConverterString.read(from: &buf), 
                manifestDefinition: FfiConverterOptionString.read(from: &buf), 
                signerUri: FfiConverterString.read(from: &buf), 
                signingAlg: FfiConverterTypeFfiSigAlg.read(from: &buf), 
                timestamper: FfiConverterOptionTypeFfiTimestamper.read(from: &buf), 
                remoteManifestUrl: FfiConverterOptionString.read(from: &buf), 
                embed: FfiConverterBool.read(from: &buf), 
                skipPostSignValidation: FfiConverterBool.read(from: &buf), 
                allowInsecureRemoteHttp: FfiConverterOptionBool.read(from: &buf), 
                limits: FfiConverterTypeFfiLimitsConfig.read(from: &buf)
        )
    }

    public static func write(_ value: FfiFragmentedBmffConfig, into buf: inout [UInt8]) {
        FfiConverterString.write(value.initGlob, into: &buf)
        FfiConverterString.write(value.fragmentsGlob, into: &buf)
        FfiConverterString.write(value.outputDir, into: &buf)
        FfiConverterOptionString.write(value.manifestDefinition, into: &buf)
        FfiConverterString.write(value.signerUri, into: &buf)
        FfiConverterTypeFfiSigAlg.write(value.signingAlg, into: &buf)
        FfiConverterOptionTypeFfiTimestamper.write(value.timestamper, into: &buf)
        FfiConverterOptionString.write(value.remoteManifestUrl, into: &buf)
        FfiConverterBool.write(value.embed, into: &buf)
        FfiConverterBool.write(value.skipPostSignValidation, into: &buf)
        FfiConverterOptionBool.write(value.allowInsecureRemoteHttp, into: &buf)
        FfiConverterTypeFfiLimitsConfig.write(value.limits, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFfiFragmentedBmffConfig_lift(_ buf: RustBuffer) throws -> FfiFragmentedBmffConfig {
    return try FfiConverterTypeFfiFragmentedBmffConfig.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFfiFragmentedBmffConfig_lower(_ value: FfiFragmentedBmffConfig) -> RustBuffer {
    return FfiConverterTypeFfiFragmentedBmffConfig.lower(value)
}


public struct FfiIngredientConfig {
    public var source: FfiAssetRef
    public var output: FfiOutputTarget
    public var limits: FfiLimitsConfig

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(source: FfiAssetRef, output: FfiOutputTarget, limits: FfiLimitsConfig) {
        self.source = source
        self.output = output
        self.limits = limits
    }
}



extension FfiIngredientConfig: Equatable, Hashable {
    public static func ==(lhs: FfiIngredientConfig, rhs: FfiIngredientConfig) -> Bool {
        if lhs.source != rhs.source {
            return false
        }
        if lhs.output != rhs.output {
            return false
        }
        if lhs.limits != rhs.limits {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(source)
        hasher.combine(output)
        hasher.combine(limits)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFfiIngredientConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiIngredientConfig {
        return
            try FfiIngredientConfig(
                source: FfiConverterTypeFfiAssetRef.read(from: &buf), 
                output: FfiConverterTypeFfiOutputTarget.read(from: &buf), 
                limits: FfiConverterTypeFfiLimitsConfig.read(from: &buf)
        )
    }

    public static func write(_ value: FfiIngredientConfig, into buf: inout [UInt8]) {
        FfiConverterTypeFfiAssetRef.write(value.source, into: &buf)
        FfiConverterTypeFfiOutputTarget.write(value.output, into: &buf)
        FfiConverterTypeFfiLimitsConfig.write(value.limits, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFfiIngredientConfig_lift(_ buf: RustBuffer) throws -> FfiIngredientConfig {
    return try FfiConverterTypeFfiIngredientConfig.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFfiIngredientConfig_lower(_ value: FfiIngredientConfig) -> RustBuffer {
    return FfiConverterTypeFfiIngredientConfig.lower(value)
}


public struct FfiLimitsConfig {
    public var maxInMemoryAssetSize: UInt64
    public var maxInMemoryOutputSize: UInt64
    public var maxStreamCopySize: UInt64
    public var maxStreamReadTimeoutSecs: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(maxInMemoryAssetSize: UInt64, maxInMemoryOutputSize: UInt64, maxStreamCopySize: UInt64, maxStreamReadTimeoutSecs: UInt64) {
        self.maxInMemoryAssetSize = maxInMemoryAssetSize
        self.maxInMemoryOutputSize = maxInMemoryOutputSize
        self.maxStreamCopySize = maxStreamCopySize
        self.maxStreamReadTimeoutSecs = maxStreamReadTimeoutSecs
    }
}



extension FfiLimitsConfig: Equatable, Hashable {
    public static func ==(lhs: FfiLimitsConfig, rhs: FfiLimitsConfig) -> Bool {
        if lhs.maxInMemoryAssetSize != rhs.maxInMemoryAssetSize {
            return false
        }
        if lhs.maxInMemoryOutputSize != rhs.maxInMemoryOutputSize {
            return false
        }
        if lhs.maxStreamCopySize != rhs.maxStreamCopySize {
            return false
        }
        if lhs.maxStreamReadTimeoutSecs != rhs.maxStreamReadTimeoutSecs {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(maxInMemoryAssetSize)
        hasher.combine(maxInMemoryOutputSize)
        hasher.combine(maxStreamCopySize)
        hasher.combine(maxStreamReadTimeoutSecs)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFfiLimitsConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiLimitsConfig {
        return
            try FfiLimitsConfig(
                maxInMemoryAssetSize: FfiConverterUInt64.read(from: &buf), 
                maxInMemoryOutputSize: FfiConverterUInt64.read(from: &buf), 
                maxStreamCopySize: FfiConverterUInt64.read(from: &buf), 
                maxStreamReadTimeoutSecs: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: FfiLimitsConfig, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.maxInMemoryAssetSize, into: &buf)
        FfiConverterUInt64.write(value.maxInMemoryOutputSize, into: &buf)
        FfiConverterUInt64.write(value.maxStreamCopySize, into: &buf)
        FfiConverterUInt64.write(value.maxStreamReadTimeoutSecs, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFfiLimitsConfig_lift(_ buf: RustBuffer) throws -> FfiLimitsConfig {
    return try FfiConverterTypeFfiLimitsConfig.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFfiLimitsConfig_lower(_ value: FfiLimitsConfig) -> RustBuffer {
    return FfiConverterTypeFfiLimitsConfig.lower(value)
}


public struct FfiTrustPolicyConfig {
    public var anchors: Data?
    public var allowedList: Data?
    public var allowedEkus: [String]?
    public var verifyIdentityTrust: Bool?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(anchors: Data?, allowedList: Data?, allowedEkus: [String]?, verifyIdentityTrust: Bool?) {
        self.anchors = anchors
        self.allowedList = allowedList
        self.allowedEkus = allowedEkus
        self.verifyIdentityTrust = verifyIdentityTrust
    }
}



extension FfiTrustPolicyConfig: Equatable, Hashable {
    public static func ==(lhs: FfiTrustPolicyConfig, rhs: FfiTrustPolicyConfig) -> Bool {
        if lhs.anchors != rhs.anchors {
            return false
        }
        if lhs.allowedList != rhs.allowedList {
            return false
        }
        if lhs.allowedEkus != rhs.allowedEkus {
            return false
        }
        if lhs.verifyIdentityTrust != rhs.verifyIdentityTrust {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(anchors)
        hasher.combine(allowedList)
        hasher.combine(allowedEkus)
        hasher.combine(verifyIdentityTrust)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFfiTrustPolicyConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiTrustPolicyConfig {
        return
            try FfiTrustPolicyConfig(
                anchors: FfiConverterOptionData.read(from: &buf), 
                allowedList: FfiConverterOptionData.read(from: &buf), 
                allowedEkus: FfiConverterOptionSequenceString.read(from: &buf), 
                verifyIdentityTrust: FfiConverterOptionBool.read(from: &buf)
        )
    }

    public static func write(_ value: FfiTrustPolicyConfig, into buf: inout [UInt8]) {
        FfiConverterOptionData.write(value.anchors, into: &buf)
        FfiConverterOptionData.write(value.allowedList, into: &buf)
        FfiConverterOptionSequenceString.write(value.allowedEkus, into: &buf)
        FfiConverterOptionBool.write(value.verifyIdentityTrust, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFfiTrustPolicyConfig_lift(_ buf: RustBuffer) throws -> FfiTrustPolicyConfig {
    return try FfiConverterTypeFfiTrustPolicyConfig.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFfiTrustPolicyConfig_lower(_ value: FfiTrustPolicyConfig) -> RustBuffer {
    return FfiConverterTypeFfiTrustPolicyConfig.lower(value)
}


public struct FfiValidationStatus {
    public var code: String
    public var url: String?
    public var explanation: String?
    public var ingredientUri: String?
    public var passed: Bool

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(code: String, url: String?, explanation: String?, ingredientUri: String?, passed: Bool) {
        self.code = code
        self.url = url
        self.explanation = explanation
        self.ingredientUri = ingredientUri
        self.passed = passed
    }
}



extension FfiValidationStatus: Equatable, Hashable {
    public static func ==(lhs: FfiValidationStatus, rhs: FfiValidationStatus) -> Bool {
        if lhs.code != rhs.code {
            return false
        }
        if lhs.url != rhs.url {
            return false
        }
        if lhs.explanation != rhs.explanation {
            return false
        }
        if lhs.ingredientUri != rhs.ingredientUri {
            return false
        }
        if lhs.passed != rhs.passed {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(code)
        hasher.combine(url)
        hasher.combine(explanation)
        hasher.combine(ingredientUri)
        hasher.combine(passed)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFfiValidationStatus: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiValidationStatus {
        return
            try FfiValidationStatus(
                code: FfiConverterString.read(from: &buf), 
                url: FfiConverterOptionString.read(from: &buf), 
                explanation: FfiConverterOptionString.read(from: &buf), 
                ingredientUri: FfiConverterOptionString.read(from: &buf), 
                passed: FfiConverterBool.read(from: &buf)
        )
    }

    public static func write(_ value: FfiValidationStatus, into buf: inout [UInt8]) {
        FfiConverterString.write(value.code, into: &buf)
        FfiConverterOptionString.write(value.url, into: &buf)
        FfiConverterOptionString.write(value.explanation, into: &buf)
        FfiConverterOptionString.write(value.ingredientUri, into: &buf)
        FfiConverterBool.write(value.passed, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFfiValidationStatus_lift(_ buf: RustBuffer) throws -> FfiValidationStatus {
    return try FfiConverterTypeFfiValidationStatus.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFfiValidationStatus_lower(_ value: FfiValidationStatus) -> RustBuffer {
    return FfiConverterTypeFfiValidationStatus.lower(value)
}


public struct FfiVerificationResult {
    public var report: String
    public var certificates: [FfiCertInfo]?
    public var status: [FfiValidationStatus]?
    public var verdict: FfiVerdict?
    public var isEmbedded: Bool?
    public var remoteUrl: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(report: String, certificates: [FfiCertInfo]?, status: [FfiValidationStatus]?, verdict: FfiVerdict?, isEmbedded: Bool?, remoteUrl: String?) {
        self.report = report
        self.certificates = certificates
        self.status = status
        self.verdict = verdict
        self.isEmbedded = isEmbedded
        self.remoteUrl = remoteUrl
    }
}



extension FfiVerificationResult: Equatable, Hashable {
    public static func ==(lhs: FfiVerificationResult, rhs: FfiVerificationResult) -> Bool {
        if lhs.report != rhs.report {
            return false
        }
        if lhs.certificates != rhs.certificates {
            return false
        }
        if lhs.status != rhs.status {
            return false
        }
        if lhs.verdict != rhs.verdict {
            return false
        }
        if lhs.isEmbedded != rhs.isEmbedded {
            return false
        }
        if lhs.remoteUrl != rhs.remoteUrl {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(report)
        hasher.combine(certificates)
        hasher.combine(status)
        hasher.combine(verdict)
        hasher.combine(isEmbedded)
        hasher.combine(remoteUrl)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFfiVerificationResult: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiVerificationResult {
        return
            try FfiVerificationResult(
                report: FfiConverterString.read(from: &buf), 
                certificates: FfiConverterOptionSequenceTypeFfiCertInfo.read(from: &buf), 
                status: FfiConverterOptionSequenceTypeFfiValidationStatus.read(from: &buf), 
                verdict: FfiConverterOptionTypeFfiVerdict.read(from: &buf), 
                isEmbedded: FfiConverterOptionBool.read(from: &buf), 
                remoteUrl: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: FfiVerificationResult, into buf: inout [UInt8]) {
        FfiConverterString.write(value.report, into: &buf)
        FfiConverterOptionSequenceTypeFfiCertInfo.write(value.certificates, into: &buf)
        FfiConverterOptionSequenceTypeFfiValidationStatus.write(value.status, into: &buf)
        FfiConverterOptionTypeFfiVerdict.write(value.verdict, into: &buf)
        FfiConverterOptionBool.write(value.isEmbedded, into: &buf)
        FfiConverterOptionString.write(value.remoteUrl, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFfiVerificationResult_lift(_ buf: RustBuffer) throws -> FfiVerificationResult {
    return try FfiConverterTypeFfiVerificationResult.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFfiVerificationResult_lower(_ value: FfiVerificationResult) -> RustBuffer {
    return FfiConverterTypeFfiVerificationResult.lower(value)
}


public struct VerifyOptions {
    public var detailed: Bool
    public var info: Bool
    public var tree: Bool

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(detailed: Bool, info: Bool, tree: Bool) {
        self.detailed = detailed
        self.info = info
        self.tree = tree
    }
}



extension VerifyOptions: Equatable, Hashable {
    public static func ==(lhs: VerifyOptions, rhs: VerifyOptions) -> Bool {
        if lhs.detailed != rhs.detailed {
            return false
        }
        if lhs.info != rhs.info {
            return false
        }
        if lhs.tree != rhs.tree {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(detailed)
        hasher.combine(info)
        hasher.combine(tree)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeVerifyOptions: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> VerifyOptions {
        return
            try VerifyOptions(
                detailed: FfiConverterBool.read(from: &buf), 
                info: FfiConverterBool.read(from: &buf), 
                tree: FfiConverterBool.read(from: &buf)
        )
    }

    public static func write(_ value: VerifyOptions, into buf: inout [UInt8]) {
        FfiConverterBool.write(value.detailed, into: &buf)
        FfiConverterBool.write(value.info, into: &buf)
        FfiConverterBool.write(value.tree, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeVerifyOptions_lift(_ buf: RustBuffer) throws -> VerifyOptions {
    return try FfiConverterTypeVerifyOptions.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeVerifyOptions_lower(_ value: VerifyOptions) -> RustBuffer {
    return FfiConverterTypeVerifyOptions.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum FfiAssetRef {
    
    case path(String
    )
    case bytes(Data
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFfiAssetRef: FfiConverterRustBuffer {
    typealias SwiftType = FfiAssetRef

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiAssetRef {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .path(try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .bytes(try FfiConverterData.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: FfiAssetRef, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .path(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        
        case let .bytes(v1):
            writeInt(&buf, Int32(2))
            FfiConverterData.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFfiAssetRef_lift(_ buf: RustBuffer) throws -> FfiAssetRef {
    return try FfiConverterTypeFfiAssetRef.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFfiAssetRef_lower(_ value: FfiAssetRef) -> RustBuffer {
    return FfiConverterTypeFfiAssetRef.lower(value)
}



extension FfiAssetRef: Equatable, Hashable {}




public enum FfiError {

    
    
    case Generic(message: String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFfiError: FfiConverterRustBuffer {
    typealias SwiftType = FfiError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Generic(
            message: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: FfiError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .Generic(message):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(message, into: &buf)
            
        }
    }
}


extension FfiError: Equatable, Hashable {}

extension FfiError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum FfiOutputTarget {
    
    case path(String
    )
    case memory
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFfiOutputTarget: FfiConverterRustBuffer {
    typealias SwiftType = FfiOutputTarget

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiOutputTarget {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .path(try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .memory
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: FfiOutputTarget, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .path(v1):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(v1, into: &buf)
            
        
        case .memory:
            writeInt(&buf, Int32(2))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFfiOutputTarget_lift(_ buf: RustBuffer) throws -> FfiOutputTarget {
    return try FfiConverterTypeFfiOutputTarget.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFfiOutputTarget_lower(_ value: FfiOutputTarget) -> RustBuffer {
    return FfiConverterTypeFfiOutputTarget.lower(value)
}



extension FfiOutputTarget: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum FfiSigAlg {
    
    case es256
    case es384
    case ps256
    case ed25519
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFfiSigAlg: FfiConverterRustBuffer {
    typealias SwiftType = FfiSigAlg

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiSigAlg {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .es256
        
        case 2: return .es384
        
        case 3: return .ps256
        
        case 4: return .ed25519
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: FfiSigAlg, into buf: inout [UInt8]) {
        switch value {
        
        
        case .es256:
            writeInt(&buf, Int32(1))
        
        
        case .es384:
            writeInt(&buf, Int32(2))
        
        
        case .ps256:
            writeInt(&buf, Int32(3))
        
        
        case .ed25519:
            writeInt(&buf, Int32(4))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFfiSigAlg_lift(_ buf: RustBuffer) throws -> FfiSigAlg {
    return try FfiConverterTypeFfiSigAlg.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFfiSigAlg_lower(_ value: FfiSigAlg) -> RustBuffer {
    return FfiConverterTypeFfiSigAlg.lower(value)
}



extension FfiSigAlg: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum FfiTimestamper {
    
    case digicert
    case custom(String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFfiTimestamper: FfiConverterRustBuffer {
    typealias SwiftType = FfiTimestamper

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiTimestamper {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .digicert
        
        case 2: return .custom(try FfiConverterString.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: FfiTimestamper, into buf: inout [UInt8]) {
        switch value {
        
        
        case .digicert:
            writeInt(&buf, Int32(1))
        
        
        case let .custom(v1):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFfiTimestamper_lift(_ buf: RustBuffer) throws -> FfiTimestamper {
    return try FfiConverterTypeFfiTimestamper.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFfiTimestamper_lower(_ value: FfiTimestamper) -> RustBuffer {
    return FfiConverterTypeFfiTimestamper.lower(value)
}



extension FfiTimestamper: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum FfiVerdict {
    
    case allowed
    case warning
    case rejected
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFfiVerdict: FfiConverterRustBuffer {
    typealias SwiftType = FfiVerdict

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiVerdict {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .allowed
        
        case 2: return .warning
        
        case 3: return .rejected
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: FfiVerdict, into buf: inout [UInt8]) {
        switch value {
        
        
        case .allowed:
            writeInt(&buf, Int32(1))
        
        
        case .warning:
            writeInt(&buf, Int32(2))
        
        
        case .rejected:
            writeInt(&buf, Int32(3))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFfiVerdict_lift(_ buf: RustBuffer) throws -> FfiVerdict {
    return try FfiConverterTypeFfiVerdict.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFfiVerdict_lower(_ value: FfiVerdict) -> RustBuffer {
    return FfiConverterTypeFfiVerdict.lower(value)
}



extension FfiVerdict: Equatable, Hashable {}



// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum FfiVerifyMode {
    
    case summary
    case info
    case detailed
    case tree
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeFfiVerifyMode: FfiConverterRustBuffer {
    typealias SwiftType = FfiVerifyMode

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiVerifyMode {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .summary
        
        case 2: return .info
        
        case 3: return .detailed
        
        case 4: return .tree
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: FfiVerifyMode, into buf: inout [UInt8]) {
        switch value {
        
        
        case .summary:
            writeInt(&buf, Int32(1))
        
        
        case .info:
            writeInt(&buf, Int32(2))
        
        
        case .detailed:
            writeInt(&buf, Int32(3))
        
        
        case .tree:
            writeInt(&buf, Int32(4))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFfiVerifyMode_lift(_ buf: RustBuffer) throws -> FfiVerifyMode {
    return try FfiConverterTypeFfiVerifyMode.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeFfiVerifyMode_lower(_ value: FfiVerifyMode) -> RustBuffer {
    return FfiConverterTypeFfiVerifyMode.lower(value)
}



extension FfiVerifyMode: Equatable, Hashable {}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionBool: FfiConverterRustBuffer {
    typealias SwiftType = Bool?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterBool.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterBool.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionData: FfiConverterRustBuffer {
    typealias SwiftType = Data?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterData.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterData.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeFfiTrustPolicyConfig: FfiConverterRustBuffer {
    typealias SwiftType = FfiTrustPolicyConfig?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeFfiTrustPolicyConfig.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeFfiTrustPolicyConfig.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeFfiAssetRef: FfiConverterRustBuffer {
    typealias SwiftType = FfiAssetRef?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeFfiAssetRef.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeFfiAssetRef.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeFfiTimestamper: FfiConverterRustBuffer {
    typealias SwiftType = FfiTimestamper?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeFfiTimestamper.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeFfiTimestamper.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeFfiVerdict: FfiConverterRustBuffer {
    typealias SwiftType = FfiVerdict?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeFfiVerdict.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeFfiVerdict.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionSequenceTypeFfiCertInfo: FfiConverterRustBuffer {
    typealias SwiftType = [FfiCertInfo]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceTypeFfiCertInfo.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypeFfiCertInfo.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionSequenceTypeFfiValidationStatus: FfiConverterRustBuffer {
    typealias SwiftType = [FfiValidationStatus]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceTypeFfiValidationStatus.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypeFfiValidationStatus.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeFfiCertInfo: FfiConverterRustBuffer {
    typealias SwiftType = [FfiCertInfo]

    public static func write(_ value: [FfiCertInfo], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeFfiCertInfo.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [FfiCertInfo] {
        let len: Int32 = try readInt(&buf)
        var seq = [FfiCertInfo]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeFfiCertInfo.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeFfiValidationStatus: FfiConverterRustBuffer {
    typealias SwiftType = [FfiValidationStatus]

    public static func write(_ value: [FfiValidationStatus], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeFfiValidationStatus.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [FfiValidationStatus] {
        let len: Int32 = try readInt(&buf)
        var seq = [FfiValidationStatus]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeFfiValidationStatus.read(from: &buf))
        }
        return seq
    }
}
public func createIngredientFfi(cfg: FfiIngredientConfig)throws  -> Data? {
    return try  FfiConverterOptionData.lift(try rustCallWithError(FfiConverterTypeFfiError.lift) {
    uniffi_que_engine_ffi_fn_func_create_ingredient_ffi(
        FfiConverterTypeFfiIngredientConfig.lower(cfg),$0
    )
})
}
public func signC2paFfi(cfg: FfiC2paConfig)throws  -> Data? {
    return try  FfiConverterOptionData.lift(try rustCallWithError(FfiConverterTypeFfiError.lift) {
    uniffi_que_engine_ffi_fn_func_sign_c2pa_ffi(
        FfiConverterTypeFfiC2paConfig.lower(cfg),$0
    )
})
}
public func signFileC2pa(signerSpec: String, alg: String, sourcePath: String, destPath: String, manifestJson: String?, parentPath: String?, timestamper: String?, remoteManifestUrl: String?, embed: Bool)throws  {try rustCallWithError(FfiConverterTypeFfiError.lift) {
    uniffi_que_engine_ffi_fn_func_sign_file_c2pa(
        FfiConverterString.lower(signerSpec),
        FfiConverterString.lower(alg),
        FfiConverterString.lower(sourcePath),
        FfiConverterString.lower(destPath),
        FfiConverterOptionString.lower(manifestJson),
        FfiConverterOptionString.lower(parentPath),
        FfiConverterOptionString.lower(timestamper),
        FfiConverterOptionString.lower(remoteManifestUrl),
        FfiConverterBool.lower(embed),$0
    )
}
}
public func verifyC2paFfi(cfg: FfiC2paVerificationConfig)throws  -> FfiVerificationResult {
    return try  FfiConverterTypeFfiVerificationResult.lift(try rustCallWithError(FfiConverterTypeFfiError.lift) {
    uniffi_que_engine_ffi_fn_func_verify_c2pa_ffi(
        FfiConverterTypeFfiC2paVerificationConfig.lower(cfg),$0
    )
})
}
public func verifyFileC2pa(sourcePath: String, opts: VerifyOptions)throws  -> String {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeFfiError.lift) {
    uniffi_que_engine_ffi_fn_func_verify_file_c2pa(
        FfiConverterString.lower(sourcePath),
        FfiConverterTypeVerifyOptions.lower(opts),$0
    )
})
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_que_engine_ffi_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_que_engine_ffi_checksum_func_create_ingredient_ffi() != 32448) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_que_engine_ffi_checksum_func_sign_c2pa_ffi() != 27301) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_que_engine_ffi_checksum_func_sign_file_c2pa() != 59177) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_que_engine_ffi_checksum_func_verify_c2pa_ffi() != 22559) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_que_engine_ffi_checksum_func_verify_file_c2pa() != 5717) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}()

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all